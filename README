* overview
In short, this Ruby script will accept commands via UDP to increment or decrement a counter, then send the updated value to OpenTSDB.

* problem
OpenTSDB is an powerful tool for tracking an extreme amount of data points in a very quick manner. The only problem with OpenTSDB is that it's just a time series database. It has no operators for increment or decrement. HBase (what OpenTSDB runs on) has these actors, but they're only available via TCP. Here at Weebly, we wanted a fast, lightweight, non-intrusive way to track a large number of counters and see them graphed in realtime. Also, no downsampling would be allowed. Full monty, full data set. For this reason, graphite, carbon, statsd, etc were all out. 

Our idea is to send simple updates from servers via UDP to a collector. The collector sends an increment or decrement operation to a Memcache or Couchbase server via persistent TCP connection. In a separate event loop, the proxy will query Memcache/Couchbase for the value of all counters it's seen, then send the data to OpenTSDB.

* impact
We chose UDP because we wanted something lightweight and fast to send updates for. You don't need TCP here to say "Increase this counter by 1". In fact, you don't want this in something like a webapp -- even if you handle it outside of the render loop. You don't want to take down your website because your stats server went offline and every process was hung waiting for a TCP connect to time out. Also, you don't care about the reply from the server. Increment/decrement and be done. Wham bam, thank you mam.

* library
There is no library. Just use a socket.

This is how easy it is to send a UDP datagram with Ruby:

  s = UDPSocket.new()
  s.send("increment yourawesomecounter",0,"yourproxyaddress",11212)

* why couchbase/memcache instead of redis, riak, etc ?
Memcache is easy, but it's not persistent nor does it handle failure well. Couchbase solves these problems. Add 2 servers and let it rip. Plus, the ASCII interface to memcache is super simple to use for troubleshooting. We could have used redis, but everyone runs memcache and knows how to use it. If you really don't care about stats persistence, you could use memcache instead of Couchbase. We'd recommend Couchbase though

* why not directly track the counter in HBase?
Yes, Hbase does have increment and decrement operators. However, it's Hbase and isn't as easy to write to as couchbase/memcached.

* shut up already, how does this thing work?
 - Send your proxy a UDP datagram on port 11212 with the action and counter separated by a space. That's it. For example, "increment YourAwesomeCounter"
 - After receiving a datagram, the proxy will send the increment command to the couchbase/memcache server.
 - That's it. There is no reply.
 - In a separate event loop (every 10 seconds by default), the proxy will ask couchbase for the values of the counters it knows about (since startup). It will take that value and put it into OpenTSDB.

* Can I use riak or redis instead of couchbase?
Sure. Go for it. I like riak. I know the Basho peeps. Give them some love.

* I built a high-frequency trading application off of this and it failed. You cost me millions.
Sorry scro. No warranty here, neither expressed nor implied. Use at your own risk.
You should have hired some real programmers instead of just copying and pasting stuff off the Internet.

* What are the requirements?
You'll need Ruby, the memcached gem, and the eventmachine gem to run the script. You'll also need couchbase/memcached setup along with OpenTSDB, Hbase, Hadoop, etc.

* Your stuff is OK, but I want to modify it. Can I change it?
Sure! I only have eleventy billion other things to work on. I wrote this in 20 minutes.

* Does it scale?
It scales better than it blends. Just add more proxy instances and point your clients at them (or use a UDP load balancer). The proxy has no local state -- Couchbase takes care of that. Eventmachine is pretty cool, so is UDP.

* I don't see much exception handling in here. How do you keep it running?
We use daemontools for stuff like this. You should, too. We don't care if it gets an unhandled exception. Daemontools will restart it. Big whoop.
